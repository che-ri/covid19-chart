{"version":3,"sources":["components/Header.js","components/Content.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Content","useState","confirmedData","setConfirmedData","quarantinedData","setQuarantinedData","lastMonthData","setlastMonthData","comparedData","setcomparedData","useEffect","fetchEvents","a","axios","get","res","makeData","data","items","arr","reduce","acc","cur","currentDate","Date","year","getFullYear","month","getMonth","date","getDate","confirmed","Confirmed","active","Active","deaths","Deaths","recovered","Recovered","findItem","find","push","console","log","labels","map","datasets","label","backgroundColor","fill","borderColor","lastMonth","length","DoughnutChartColor","prevMonth","comparedActive","comparedDeaths","comparedRecovered","option","legend","display","position","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee14703a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n    return (\n        <header className=\"header\">\n            <h1>COVID-19</h1>\n            <select>\n                <option>국내</option>\n                <option>세계</option>\n            </select>\n        </header>\n    );\n};\n\nexport default Header;\n","import React, { useState, useEffect } from \"react\";\nimport { Bar, Doughnut, Line } from \"react-chartjs-2\";\nimport axios from \"axios\";\n\nconst Content = () => {\n    {\n        /* 데이터를 confirmedData에 넣는다. */\n    }\n    const [confirmedData, setConfirmedData] = useState({});\n    const [quarantinedData, setQuarantinedData] = useState({});\n    const [lastMonthData, setlastMonthData] = useState({});\n    const [comparedData, setcomparedData] = useState({});\n    //페이지가 마운트되면 바로 정보를 가져오기위해 useEffect사용!\n    useEffect(() => {\n        const fetchEvents = async () => {\n            //코로나 한국현황 api를 res에 담는다.\n            const res = await axios.get(\n                \"https://api.covid19api.com/dayone/country/kr\"\n            );\n            //data를 모두 받아온다음에 그다음 순서를 실행하기 위해, async와 await를 사용한다.\n            makeData(res.data);\n        };\n        const makeData = (items) => {\n            const arr = items.reduce((acc, cur) => {\n                const currentDate = new Date(cur.Date);\n                const year = currentDate.getFullYear();\n                const month = currentDate.getMonth();\n                const date = currentDate.getDate();\n                const confirmed = cur.Confirmed;\n                const active = cur.Active;\n                const deaths = cur.Deaths;\n                const recovered = cur.Recovered;\n\n                const findItem = acc.find(\n                    (a) => a.year === year && a.month === month\n                );\n                // 해당 연월에 대한 정보가 있으면, 중복푸시하지 않음.\n                if (!findItem) {\n                    acc.push({\n                        year,\n                        month,\n                        date,\n                        confirmed,\n                        active,\n                        deaths,\n                        recovered,\n                    });\n                }\n                if (findItem && findItem.date < date) {\n                    // 해당 연월에 최신 date 값 받기\n                    findItem.active = active;\n                    findItem.deaths = deaths;\n                    findItem.date = date;\n                    findItem.year = year;\n                    findItem.month = month;\n                    findItem.confirmed = confirmed;\n                    findItem.recovered = recovered;\n                }\n                return acc;\n            }, []);\n            // reduce를 사용하여 반복문을 만든다. acc는 누적값, cur은 현재값이다. 그런 다음 배열로 값을 전달받는다.\n            console.log(arr);\n            const labels = arr.map((a) => `${a.month + 1}월`);\n            setConfirmedData({\n                labels,\n                datasets: [\n                    {\n                        label: \"국내 누적 확진자\",\n                        backgroundColor: \"#ff7979\",\n                        fill: true,\n                        data: arr.map((a) => a.confirmed),\n                    },\n                ],\n            });\n            setQuarantinedData({\n                labels,\n                datasets: [\n                    {\n                        label: \"월별 격리자 현황\",\n                        borderColor: \"#badc58\",\n                        fill: false,\n                        data: arr.map((a) => a.active),\n                    },\n                ],\n            });\n            const lastMonth = arr[arr.length - 1];\n            const DoughnutChartColor = [\"#ff3d67\", \"#059bff\", \"#ffc233\"];\n            setlastMonthData({\n                labels: [\"확진자\", \"격리해제\", \"사망\"],\n                datasets: [\n                    {\n                        label: \"누적 확진, 해제, 사망 비율\",\n                        backgroundColor: DoughnutChartColor,\n                        borderColor: DoughnutChartColor,\n                        fill: false,\n                        data: [\n                            lastMonth.confirmed,\n                            lastMonth.recovered,\n                            lastMonth.deaths,\n                        ],\n                    },\n                ],\n            });\n            const prevMonth = arr[arr.length - 2];\n            const comparedActive = prevMonth.active - lastMonth.active;\n            const comparedDeaths = prevMonth.deaths - lastMonth.deaths;\n            const comparedRecovered = prevMonth.recovered - lastMonth.recovered;\n            setcomparedData({\n                labels: [\"확진자\", \"격리해제\", \"사망\"],\n                datasets: [\n                    {\n                        label: \"직전달 비교 현황\",\n                        backgroundColor: DoughnutChartColor,\n                        borderColor: DoughnutChartColor,\n                        fill: false,\n                        data: [\n                            comparedActive,\n                            comparedRecovered,\n                            comparedDeaths,\n                        ],\n                    },\n                ],\n            });\n        };\n        fetchEvents();\n    }, []);\n    // 마운트될때만 실행하기 위해서, 2번째 파라미터에 배열을 넣어주었다.\n\n    return (\n        <section>\n            <h2>국내 코로나 현황</h2>\n            <div className=\"content\">\n                <div>\n                    <Bar\n                        data={confirmedData}\n                        option={\n                            ({\n                                title: {\n                                    display: true,\n                                    text: \"누적 확진자 추이\",\n                                    fontSize: 16,\n                                },\n                            },\n                            { legend: { display: true, position: \"bottom\" } })\n                        }\n                    />\n                    {/* legend : 그래프가 어떤 내용을 뜻하는지 나타낸다. */}\n                </div>\n                <div>\n                    <Line\n                        data={quarantinedData}\n                        option={\n                            ({\n                                title: {\n                                    display: true,\n                                    text: \"월별 격리자 현황\",\n                                    fontSize: 16,\n                                },\n                            },\n                            { legend: { display: true, position: \"bottom\" } })\n                        }\n                    />\n                </div>\n                <div>\n                    <Doughnut\n                        data={lastMonthData}\n                        option={\n                            ({\n                                title: {\n                                    display: true,\n                                    text: `누적 확진, 해제, 현황, ${\n                                        new Date().getMonth() + 1\n                                    }`,\n                                    fontSize: 16,\n                                },\n                            },\n                            { legend: { display: true, position: \"bottom\" } })\n                        }\n                    />\n                </div>\n                <div>\n                    <Bar\n                        data={comparedData}\n                        option={\n                            ({\n                                title: {\n                                    display: true,\n                                    text: \"누적 확진자 추이\",\n                                    fontSize: 16,\n                                },\n                            },\n                            { legend: { display: true, position: \"bottom\" } })\n                        }\n                    />\n                </div>\n            </div>\n        </section>\n    );\n};\n\nexport default Content;\n","import \"./App.scss\";\nimport Header from \"./components/Header\";\nimport Content from \"./components/Content\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header />\n            <Content />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}